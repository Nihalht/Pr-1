#!/bin/bash

echo "üöÄ Advanced Rust Chat Server Demo"
echo "=================================="
echo ""

# Check if server is running
if ! curl -s http://localhost:3000 > /dev/null; then
    echo "‚ùå Server is not running. Starting it now..."
    cargo run &
    sleep 3
fi

echo "‚úÖ Server is running at http://localhost:3000"
echo ""

echo "üìä Testing API Endpoints:"
echo "-------------------------"

echo "1. Getting users:"
curl -s http://localhost:3000/api/users | jq .

echo ""
echo "2. Creating a user:"
curl -s -X POST http://localhost:3000/api/users \
  -H "Content-Type: application/json" \
  -d '{"username":"demo_user","email":"demo@example.com"}' | jq .

echo ""
echo "3. Getting messages:"
curl -s http://localhost:3000/api/messages | jq .

echo ""
echo "4. Creating a message:"
USER_ID=$(curl -s -X POST http://localhost:3000/api/users \
  -H "Content-Type: application/json" \
  -d '{"username":"message_user","email":"message@example.com"}' | jq -r '.id')

curl -s -X POST http://localhost:3000/api/messages \
  -H "Content-Type: application/json" \
  -d "{\"content\":\"Hello from Rust! ü¶Ä\",\"user_id\":\"$USER_ID\",\"message_type\":\"Text\"}" | jq .

echo ""
echo "5. Getting messages again:"
curl -s http://localhost:3000/api/messages | jq .

echo ""
echo "üéØ Advanced Features:"
echo "-------------------"
echo "‚Ä¢ Real-time WebSocket messaging"
echo "‚Ä¢ Thread-safe state management with DashMap"
echo "‚Ä¢ Async/await with Tokio runtime"
echo "‚Ä¢ Custom error handling with thiserror"
echo "‚Ä¢ Modern web frontend with responsive design"
echo "‚Ä¢ RESTful API with JSON serialization"
echo "‚Ä¢ CORS support for cross-origin requests"
echo "‚Ä¢ Structured logging with tracing"

echo ""
echo "üåê Open your browser and visit: http://localhost:3000"
echo "   The chat application will automatically create users and connect via WebSocket!"
echo ""
echo "üìù To stop the server, press Ctrl+C" 